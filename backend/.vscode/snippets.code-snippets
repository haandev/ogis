{
  "Mongoose Model": {
    "prefix": "ooic:monm",
    "body": [
      "import { InferSchemaType, Model, Schema } from \"mongoose\";",
      "import { mongoose } from \"~/drivers/mongoose\";",
      "",
      "/**",
      " * Represents the Mongoose schema of '${TM_FILENAME_BASE}' documents.",
      " * ",
      " * This schema specifies the structure of documents that will be stored in the '${TM_FILENAME_BASE}' collection.",
      " */",
      "export const ${TM_FILENAME_BASE}Schema = new Schema(",
      "  {",
      "    ${1:/* schema definitions */}",
      "  },",
      "  { timestamps: true }",
      ");",
      "",
      "/**",
      " * The TypeScript type representing a document of the '${TM_FILENAME_BASE}' model.",
      " * ",
      " * This type defines the shape of a single document in the '${TM_FILENAME_BASE}' collection.",
      " */",
      "export type ${TM_FILENAME_BASE}Type = InferSchemaType<typeof ${TM_FILENAME_BASE}Schema>;",
      "",
      "/**",
      " * The Mongoose model for '${TM_FILENAME_BASE}' documents.",
      " * ",
      " * This model represents the interaction point for performing CRUD (Create, Read, Update, Delete) operations",
      " * on documents in the '${TM_FILENAME_BASE}' collection.",
      " */",
      "export const ${TM_FILENAME_BASE}: Model<${TM_FILENAME_BASE}Type> = mongoose.model(\"${TM_FILENAME_BASE}\", ${TM_FILENAME_BASE}Schema);"
    ],
    "description": "Mongoose Model"
  },
  "Sequelize Model": {
    "prefix": "ooic:sqm",
    "body": [
      "import { InferAttributes, InferCreationAttributes, DataTypes, CreationOptional, Model } from \"@sequelize/core\"",
      "import { sequelize } from \"~/drivers/sequelize\"",
      "",
      "/**",
      " * Represents the attributes of an '${TM_FILENAME_BASE}' entity as defined in the database.",
      " * ",
      " * This type defines the structure of attributes associated with an '${TM_FILENAME_BASE}' entity",
      " * in the database.",
      " */",
      "export type ${TM_FILENAME_BASE}Attributes=InferAttributes<${TM_FILENAME_BASE}>",
      "",
      "/**",
      " * Defines the attributes for creating a new '${TM_FILENAME_BASE}' entity.",
      " * ",
      " * This type represents the attributes needed to create a new '${TM_FILENAME_BASE}' entity.",
      " */",
      "export type ${TM_FILENAME_BASE}CreationAttributes=InferCreationAttributes<${TM_FILENAME_BASE}>",
      "",
      "/**",
      " * Represents the '${TM_FILENAME_BASE}' entity.",
      " * ",
      " * This class extends the Sequelize Model class and defines the structure and behavior of the '${TM_FILENAME_BASE}' entity.",
      " */",
      "export class ${TM_FILENAME_BASE} extends Model<${TM_FILENAME_BASE}Attributes, ${TM_FILENAME_BASE}CreationAttributes> {",
      "  declare id: CreationOptional<number>",
      "  ${1:/* type definitions */}",
      "}",
      "",
      "/*",
      " * Initializes the '${TM_FILENAME_BASE}' model with its attributes and options.",
      " * This function sets up the '${TM_FILENAME_BASE}' model with its database schema and associated options.",
      " */",
      "${TM_FILENAME_BASE}.init(",
      "  {",
      "    id: {",
      "      autoIncrement: true,",
      "      type: DataTypes.INTEGER.UNSIGNED,",
      "      allowNull: false,",
      "      primaryKey: true,",
      "    },",
      "    ${2:/* model definitions */}",
      "  },",
      "  {",
      "    tableName: \"${TM_FILENAME_BASE/(.*)$/${1:/downcase}/}\",",
      "    sequelize,",
      "  }",
      ")"
    ],
    "description": "Sequelize Model"
  },
  "Request Handler": {
    "prefix": "ooic:rhm",
    "body": [
      "import { RequestHandler } from \"express\";",
      "",
      "/**",
      " * Request handler for ${TM_FILENAME_BASE}.",
      " * @param request The Express request object.",
      " * @param response The Express response object.",
      " * @param next The next middleware function.",
      " *",
      " * @description ${1:description}.",
      " */"
      "export const ${TM_FILENAME_BASE}: RequestHandler = async (request, response, next) => {",
      "  try {",
      "    ${2:/* try code */}",
      "  } catch (error) {",
      "    next(error)",
      "  }",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "description": "Request Handler"
  },
  "Error Handler": {
    "prefix": "ooic:errh",
    "body": [
      "import { ErrorRequestHandler } from \"express\";",
      "import { StatusCodes } from \"http-status-codes\"",
      "",
      "/**",
      " * Defines an Express error handling middleware.",
      " * ",
      " * This middleware handles errors and sends an appropriate response based on the error type.",
      " * If the error's name is \"${TM_FILENAME_BASE}\", it sends the error object as the response body with a ${1:500} status code.",
      " * Otherwise, it passes the error to the next middleware.",
      " * ",
      " * @param error - The error object.",
      " * @param _request - The Express request object (unused).",
      " * @param response - The Express response object.",
      " * @param next - The next middleware function.",
      " */",
      "const ${TM_FILENAME_BASE}: ErrorRequestHandler = async (error, _request, response, next) => {",
      "  if (error.name === \"${TM_FILENAME_BASE}\") return response.status(StatusCodes${2:.INTERNAL_SERVER_ERROR}).send(error).json();",
      "  next(error);",
      "};",
      "export default ${TM_FILENAME_BASE}",
      ""
    ],
    "description": "Error Handler"
  }
}
